[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "waltzboard"
dynamic = ["version"]
description = 'Waltzboard: Multi-Criteria Automated Dashboard Design'
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = []
authors = [
  { name = "Jiwon Choi", email = "jiwnchoi@skku.edu" },
  { name = "Jaemin Jo", email = "jmjo@skku.edu" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "pandas",
  "numpy",
  "altair",
  "scikit-learn",
  "ipython",
  "fastapi[standard]",
  "vega-datasets",
  "uvicorn",
  "pydantic-settings",
]
[project.urls]
Documentation = "https://github.com/jiwnchoi/Waltzboard#readme"
Issues = "https://github.com/jiwnchoi/Waltzboard/issues"
Source = "https://github.com/jiwnchoi/Waltzboard"

[tool.hatch.version]
path = "waltzboard/__about__.py"

[tool.hatch.envs.default]
dependencies = ["coverage[toml]>=6.5", "pytest"]


[tool.hatch.build]
only-packages = true
artifacts = ["waltzboard/api/static/*", "locales"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = ["waltzboard/api/static/index.html"]
skip-if-exists = ["waltzboard/api/static/index.html"]
dependencies = ["hatch-jupyter-builder>=0.5.0"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = "pnpm"
build_cmd = "build"

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.types]
dependencies = ["pyright"]
[tool.hatch.envs.types.scripts]
check = "pyright"

[tool.coverage.run]
source_pkgs = ["waltzboard", "tests"]
branch = true
parallel = true
omit = ["waltzboard/__about__.py"]

[tool.coverage.paths]
waltzboard = ["waltzboard"]
tests = ["tests", "*/waltzboard/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E4", "E7", "E9", "F", "I", "FA"]
ignore = []
ignore-init-module-imports = true

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
# disable __init__ 
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"


[tool.pyright]
include = ["waltzboard"]
exclude = [
  "**/node_modules",
  "**/__pycache__",
  "waltzboard/experimental",
  "waltzboard/typestubs",
]
reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.9"

[dependency-groups]
dev = ["ruff>=0.11.7"]
